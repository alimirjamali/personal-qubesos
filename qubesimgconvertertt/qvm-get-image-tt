#!/usr/bin/python3 -O

# The Qubes OS Project, http://www.qubes-os.org
# Ali's personal Qubes OS improvements, http://www.mirjamali.com
#
# Copyright (C) 2013  Wojciech Porczyk <wojciech@porczyk.eu>
# Copyright (C) 2024  Ali Mirjamai <ali@mirjamali.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import argparse
import qubesadmin
import qubesimgconvertertt

parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter, \
        description='Secure copy of images between virtual machines', \
        epilog="Both SRC and DST may specify format in gm(1) way, i.e. " \
        "png:aqq.gif\nANSI representation in xterm & xfce4-terminal is usually "\
        "limited to 256 colors.")

parser.add_argument('vmname', metavar='VMNAME', help='Source VM')
parser.add_argument('color', metavar='COLOR', \
        help='Color for the effects. Will be ignored for untouched & invert filters.')
parser.add_argument('src', metavar='SRC', help='Path inside source VM')

effectgroup = parser.add_argument_group(title="Image Effects", \
        description="Effect filter(s) to perform on the image")
effectgroup.add_argument("--filter", type=str, default="ttfilter", choices= \
        ["ttfilter", "tint", "overlay","thin-border", "thick-border", \
        "untouched", "invert"], \
        help="'ttfilter' is the default i.e.: program will look for 'ttfilter' " \
        "key in VM features. If it exists, its value should indicate the effect " \
        "for that qube. If 'ttfilter' feature key is missing or it contains an " \
        "invalid value, 'tint' will be the default.")
effectgroup.add_argument("--mirror", type=str, default="none", choices=\
        ["vertical", "vertically", "horizontal", "horizontally", "both"], \
        help="Mirror image in one or both axes.")
effectgroup.add_argument("--alphacomposite", metavar="SRCALPHA", type=str, \
        help="Composite filtered image on top of another image. "\
        "Provide path of background image inside source VM.")

dstoransi = parser.add_argument_group(title="Output Control", \
        description="Image could be saved or printed to the terminal (or both)")
dstoransi.add_argument('dst', metavar='DST', \
        help='Destination path in this VM', nargs='?')
dstoransi.add_argument("--ANSI", type=str, \
        choices=["pattern", "white", "black", "COLOR"], help="Print ANSI " \
        "X3.64(ISO/IEC 6429) color representation of image in color-capable tty. "\
        "Background could be GIMP-Style transparency representation 'pattern', " \
        "'white', 'black' or 'COLOR' to apply 2nd positional argument as bg.")

def main():
    args = parser.parse_args()

    app = qubesadmin.Qubes()
    try:
        vm = app.domains[args.vmname]
    except KeyError:
        vm = None

    if vm is None:
        parser.error('No such VM: {0}'.format(args.vmname))
    if not(args.ANSI or args.dst):
        parser.error("Either or both of --ANSI or DST is required")

    img=qubesimgconvertertt.Image.get_from_vm(vm, args.src)
    
    filter = args.filter
    if filter == "ttfilter":
        filter = vm.features.get("ttfilter", "tint")

    ''' Python 3.11 is nicely shipped with Q4.2, so we use match statement'''
    match filter:
        case "tint":
            img=img.tint(args.color)
        case "overlay":
            img=img.overlay(args.color)
        case "thin-border":
            img=img.thin_border(args.color)
        case "thick-border":
            img=img.thick_border(args.color)
        case "untouched":
            img=img.untouched()
        case "invert":
            img=img.invert()
        case "mirror":
            img=img.mirror(1)
        case "flip":
            img=img.mirror(0)
        case _:
            img=img.tint(args.color)

    match args.mirror:
        case "vertical" | "vertically":
            img=img.mirror(0)
        case "horizontal" | "horizontally":
            img=img.mirror(1)
        case "both":
            img=img.mirror((0,1))
        case _:
            pass

    if args.alphacomposite:
        back=qubesimgconvertertt.Image.get_from_vm(vm, args.alphacomposite)
        img=img.alphacomposite(back)

    if args.ANSI:
        if args.ANSI == "COLOR":
            img.ANSI(args.color)
        else:
            img.ANSI(args.ANSI)

    if args.dst:
        img.save(args.dst)

if __name__ == '__main__':
    main()

# vim: ft=python sw=4 ts=4 et
