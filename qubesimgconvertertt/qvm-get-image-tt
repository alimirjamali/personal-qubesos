#!/usr/bin/python3 -O

# The Qubes OS Project, http://www.qubes-os.org
#
# Ali's personal Qubes OS improvements, http://www.mirjamali.com
#
# Copyright (C) 2013  Wojciech Porczyk <wojciech@porczyk.eu>
# Copyright (C) 2024  Ali Mirjamai <ali@mirjamali.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import argparse
import qubesadmin
import qubesimgconvertertt

parser = argparse.ArgumentParser(
        description='Secure copy of images between virtual machines',
        epilog='Both SRC and DST may specify format in gm(1) way,\n'
        'i.e. png:aqq.gif')

parser.add_argument('vmname', metavar='VMNAME', help='Source VM')
parser.add_argument('colour', metavar='COLOUR', help='Colour')
parser.add_argument('src', metavar='SRC', help='Path inside source VM')
parser.add_argument('dst', metavar='DST', help='Destination path in this VM')
parser.add_argument("--ANSI", action="store_true", help="Print ANSI X3.64 "\
        "(ISO/IEC 6429) color representation of image in color capable tty")
parser.add_argument("--filter", type=str, default="custom", choices=["custom",\
        "tint", "overlay","thin-border", "thick-border", "untouched", "invert"],\
        help="Filter to perform on the image. 'custom' is the default i.e.: "\
        "Program will look for 'ttfilter' key in qube features. If that key "\
        "exits, its value should indicate default filter for that qube. If "\
        "'ttfilter' is missing or it contains an invalid filter, 'tint' will "\
        "be the default.")
parser.add_argument("--mirror", type=str, default="none", choices=\
        ["vertical", "vertically", "horizontal", "horizontally", "both"],\
        help="Mirror image in one or both axes.")

def main():
    args = parser.parse_args()

    app = qubesadmin.Qubes()
    try:
        vm = app.domains[args.vmname]
    except KeyError:
        vm = None

    if vm is None:
        parser.error('No such VM: {0}'.format(args.vmname))

    img=qubesimgconvertertt.Image.get_from_vm(vm, args.src)
    
    filter = args.filter
    if filter == "custom":
        filter = vm.features.get("ttfilter", "tint")

    ''' Python 3.11 is nicely shipped with Q4.2, so we use match statement'''
    match filter:
        case "tint":
            img=img.tint(args.colour)
        case "overlay":
            img=img.overlay(args.colour)
        case "thin-border":
            img=img.thin_border(args.colour)
        case "thick-border":
            img=img.thick_border(args.colour)
        case "untouched":
            img=img.untouched()
        case "invert":
            img=img.invert()
        case "mirror":
            img=img.mirror(1)
        case "flip":
            img=img.mirror(0)
        case _:
            img=img.tint(args.colour)

    match args.mirror:
        case "vertical" | "vertically":
            img=img.mirror(0)
        case "horizontal" | "horizontally":
            img=img.mirror(1)
        case "both":
            img=img.mirror((0,1))
        case _:
            pass

    if args.ANSI:
        img.ANSI()

    img.save(args.dst)

if __name__ == '__main__':
    main()

# vim: ft=python sw=4 ts=4 et
