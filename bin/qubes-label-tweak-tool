#!/bin/bash
#
# Ali's personal Qubes OS improvements, http://www.mirjamali.com
#
# Copyright (C) 2024  Ali Mirjamai <ali@mirjamali.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

set -o noglob

declare syntax="\
This tool is a simple command line utility to manage Qubes OS labels. It could
list, create, get value, print index or remove labels on Qubes OS dom0/GUIVM.
In order to avoid possible conflicts with any probable official labels which 
might be introduced in the future, it is advisable to prepend a suffix to new
custom labels. Good suffix examples are 'custom', 'user', 'personal', etc.
Avoid Hyphen (-) in label names. Also never ever remove standard labels!

usage: qubes-label-tweak-tool [--verbose] [-assume-yes] [--help] [--ANSI]
                              [--raw-data] COMMAND ...

options:
  -v, --verbose             verbose operation
  -h, --help                show command help
  -y, --assume-yes          automatically answer yes to all questions
  --ANSI                    print label values in color with ANSI X3.64
                            (ISO/IEC 6429) escape codes in terminal. it requires
                            color capable tty such as xterm or xfce4-terminal
                            even that is rough representation of colors as tty
                            is usually limited to 256 color limit term emulators
  --raw-data                output data in easy to parse format without headers
                            intended for bash-parsing. this will disable ANSI &
                            verbose options.

create subcommand options:
  --icon <allvm|appvm|dispvm|servicevm|standalonevm|templatevm>=filename
                            by default, Qubes Qute icons are used as templates
                            for new icons. user could provide SVG icon for all
                            or one class of VMs. this option could be repeated
                            multiple times for different VM classes.
  --tint <on|off|yes|no>    tint user provided icons or not. default is off.
                            user could control tintiing of individual icons by
                            adding --tint <on|off> before each --icon instance

subcommands:
   list                     List all labels, their indexes and their values
   create <LABEL> <VALUE>   Create a new label with the provided color value.
                            Value should be in '0xRRGGBB' format.
   get <LABEL|INDEX>        Print hexadecimal value of label
   index <LABEL>            Print index of the label in Qubes database
   remove <LABEL|INDEX>     Remove label from Qubes database.
"

# Note to self:
#
# Enquire about maximum length of labels supported by the API.
# Enquire about supported characters for labels.
# Enquire if string sanitization for label name is needed at client side.

declare VERBOSE=false
declare ASSUMEYES=false
declare ANSI=false
declare RAWDATA=false

declare SUBCOMMAND=""
declare LABEL=""
declare VALUE=""
declare SELF=${0##*/}
declare HOSTNAME=$(hostname)

declare TARGETICONS="${HOME}/.local/share/icons/hicolor"
declare SOURCETEMPLATE="/usr/share/icons/hicolor"
declare -A SVGTEMPLATE=() SVGTEMPLATETINT=()
declare TINT=false
for klass in appvm dispvm servicevm standalonevm templatevm; do
	# Selecting qute red icons as the default template for new icons
	SVGTEMPLATE["${klass}"]="${SOURCETEMPLATE}/scalable/apps/${klass}-red.svg"
	SVGTEMPLATETINT["${klass}"]=true
done
declare CONVERTCMD=""
# Note to self: qubes-artwork repo uses inkscape to convert SVGs to PNGs...
# However, no one is going to have it installed in dom0 or GUIVM
if [ -f /usr/bin/gm ]; then
	CONVERTCMD="gm convert -background transparent"
elif [ -f /usr/bin/convert ]; then
	CONVERTCMD="convert +antialais -background transparent"
fi

# Synopsis: print_usage [EXIT_CODE]
print_usage() {
	echo "${syntax}"
	[ ! -z ${1} ] && exit ${1}
}

# Synopsis: abort EXIT_CODE MESSAGE
abort() {
	echo "error: ${2}" 1>&2
	echo "Please see --help for more information." 1>&2
	exit ${1}
}

# Synopsis prompt <MESSAGE>
prompt() {
	echo "${1}"
	read -p "Do you want to proceed? (y/n) " REPLY
	if [[ $REPLY =~ ^[Nn]$ ]]; then
		echo "Aborting operation..."
		exit 0
	elif ! [[ $REPLY =~ ^[Yy]$ ]]; then
		abort 22 "Please type Y or N!"
	fi
}

# Synopsis hex_to_int <COLOR>
hex_to_int() {
	# Accepted formats are 0xRRGGBB, #RRGGBB and RRGGBB
	local COLOR="${1}" R G B
	! [[ ${COLOR} =~ ^(0x|#|)([0-9a-fA-F]){6}$ ]] && exit 22
	COLOR="${COLOR#0x}"; COLOR="${COLOR#\#}"
	printf '%d %d %d' 0x${COLOR:0:2} 0x${COLOR:2:2} 0x${COLOR:4:2}
}

# Synopsis ANSI <COLOR> <TEXT>
ANSI() {
	local -a RGB=($(hex_to_int ${1}))
	[[ ${?} -ne 0 ]] && exit 22
	shift
	printf '\e[48;2;%d;%d;%dm' ${RGB[@]}
	echo -n "$@"
	printf '\e[0m'
}

# Synopsis rgb_to_hsv <R> <G> <B>
rgb_to_hsv() {
	local -i R=$1 G=$2 B=$3
	local -i CmaxX255 CminX255 DeltaX255 Hue SaturationX100 ValueX100
	CmaxX255=$(( $R > $G ? $R : $G ));
	CmaxX255=$(( $CmaxX255 > $B ? $CmaxX255 : $B ))
	CminX255=$(( $R < $G ? $R : $G ));
	CminX255=$(( $CminX255 < $B ? $CminX255 : $B ))
	DeltaX255=$(($CmaxX255-$CminX255))
	if [ $DeltaX255 -eq 0 ]; then
		Hue=0
	else
		case $CmaxX255 in
			$R)
				Hue=$(((($G-$B)*60/$DeltaX255)))
				[ $Hue -lt 0 ] && Hue=$((360+$Hue))
				;;
			$G)
				Hue=$((($B-$R)*60/$DeltaX255+120))
				;;
			$B)
				Hue=$((($R-$G)*60/$DeltaX255+240))
				;;
		esac
	fi
	if [ $CmaxX255 -eq 0 ]; then
		SaturationX100=0
	else
		SaturationX100=$(($DeltaX255*100/$CmaxX255))
	fi
	ValueX100=$(($CmaxX255*100/255))
	printf '%d %d %d' $Hue $SaturationX100 $ValueX100
}

# Synopsis hsv_to_rgb <HUE> <SATURATIONx100> <VALUEx100>
hsv_to_rgb() {
	local -i Hue=${1} Sx100=${2} Vx100=${3}
	local -i Cx255=$(($Sx100*$Vx100*255/10000))
	local -i x=$((($Hue % 120)-60))
	x=${x#-}
	local -i Xx255=$(($Cx255*(60-$x)/60))
	local -i Mx255=$(($Vx100*255/100-$Cx255))
	local -i RP GP BP R G B
	if [ $Hue -lt 60 ]; then
		RP=$Cx255; GP=$Xx255; BP=0
	elif [ $Hue -lt 120 ]; then
		RP=$Xx255; GP=$Cx255; BP=0
	elif [ $Hue -lt 180 ]; then
		RP=0; GP=$Cx255; BP=$Xx255
	elif [ $Hue -lt 240 ]; then
		RP=0; GP=$Xx255; BP=$Cx255
	elif [ $Hue -lt 300 ]; then
		RP=$Xx255; GP=0; BP=$Cx255
	else
		RP=$Cx255; GP=0; BP=$Xx255
	fi
	R=$(($RP+$Mx255))
	G=$(($GP+$Mx255))
	B=$(($BP+$Mx255))
	printf '%d %d %d' $R $G $B
}

# Synopsis tint_color <COLOR> <TINT>
tint_color() {
	local -a COLOR=($(hex_to_int ${1}))
	local -a TINT=($(hex_to_int ${2}))
	local -a CHSV=($(rgb_to_hsv ${COLOR[@]}))
	local -a THSV=($(rgb_to_hsv ${TINT[@]}))
	local -a RESULT=($(hsv_to_rgb ${THSV[0]} ${CHSV[1]} ${CHSV[2]}))
	printf '0x%02x%02x%02x' ${RESULT[@]}
}

# Synopsis: verify_user_icon <class=SVGFILE>
verify_custom_icon() {
	local klass="${1%%=*}" svgfile="${1#*=}" mime
	! [[ ${1} =~ ^(all|app|disp|service|standalone|template)vm=.*$ ]] &&\
		abort 22 "Invalid option ${1} for --icon"
	! [ -f "${svgfile}" ] && abort 22 "Could not find ${svgfile}!"
	mime=$(file --brief --raw --mime-type "${svgfile}")
	if ! [[ "${mime}" == "image/svg+xml" ]]; then
		echo "Only SVG icons are supported as icon templates!"
		abort 22 "Filetype: '${mime}' detected for ${svgfile} icon!"
	else
		$VERBOSE && echo "Successfully verified ${svgfile} as ${mime}"
	fi
	[[ "${klass}" == "allvm" ]] && \
		klass=(appvm dispvm servicevm standalonevm templatevm)
	for k in "${klass[@]}"; do
		SVGTEMPLATE["${k}"]="${svgfile}"
		SVGTEMPLATETINT["${k}"]=${TINT}
	done
}

# Synopsis: parse_cmd_parameters [OPTIONS] COMMAND ...
parse_cmd_parameters() {
	local arguments=$(getopt -n "${SELF}" --options vhy \
		--longoptions verbose,help,assume-yes,ANSI,raw-data,icon:,tint:\
		-- "${@}")

	[[ ${?} -ne 0 ]] && abort 22 "Invalid option!"
	eval set -- "${arguments}"
	unset arguments

	while true
	do
		case ${1} in
			-v|--verbose) VERBOSE=true;;
			-h|--help) print_usage 0;;
			-y|--assume-yes) ASSUMEYES=true;;
			--ANSI) ANSI=true;;
			--raw-data)
				RAWDATA=true
				VERBOSE=false
				ANSI=false;;
			--icon)
				verify_custom_icon "${2}"
				shift;;
			--tint)
				case ${2} in
					on|yes) TINT=true;;
					off|no) TINT=false;;
					*) abort 22 \
						"Invalid option ${2} for --tint"
					;;
				esac
				shift;;
			--) shift; break;;
			*) abort 22 "Invalid argument: ${1}";;
		esac
		shift
	done

	[[ $# -lt 1 ]] && abort 22 "Subcommand missing!"
	SUBCOMMAND="${1}"; shift

	case "${SUBCOMMAND}" in
		list)
			[[ $# -gt 0 ]] && abort 7 "Invalid argument: ${@}"
			;;
		create)
			[[ $# -ne 2 ]] && abort 22 "Invalid syntax!"
			LABEL="${1}"
			VALUE="${2}"
			if ! [[ ${VALUE} =~ ^0x([0-9a-fA-F]){6}$ ]];
			then
				abort 22 "Invalid color: ${VALUE}"
			fi
			;;
		get|index|remove)
			[[ $# -ne 1 ]] && abort 22 "Invalid syntax!"
			LABEL="${1}"
			;;
		*) abort 22 "Invalid command: ${SUBCOMMAND}";;
	esac
}

# Synopsis: qubesd_admin_api <CALL> <DEST> [ARGUMENTS]
qubesd_admin_api() {
	local -a api_message
	local -i message_type
	local CALL="${1}" DEST="${2}"
	shift; shift
	if [ $# -le 1 ]; then
		readarray -t api_message < <(qubesd-query --empty --null \
			${HOSTNAME} ${CALL} ${DEST} ${@} | tr '\0' '\n')
	else
		local ARGUMENT="${1}"
		shift
		local INSIDE="${@}"
		readarray -t api_message < <(qubesd-query --null \
			${HOSTNAME} ${CALL} ${DEST} ${ARGUMENT} <<< "${INSIDE}"\
			| tr '\0' '\n')
	fi
	message_type=${api_message[0]}
	unset api_message[0]
	printf '%s\n' "${api_message[@]}"
	return ${message_type}
}

# Synopsis label_list
label_list() {
	local -a LABELS
	local LABEL INDEX VALUE
	local PRINTFORMAT V
	$VERBOSE && echo "Fetching list of all labels from Qubes Admin API..." 
	if $RAWDATA; then
		PRINTFORMAT="%s|%s|%s"
	else
		PRINTFORMAT="%-25s %-6s %-8s"
		printf "${PRINTFORMAT}\n" Label Index Value
	fi
	LABELS=($(qubesd_admin_api admin.label.List dom0 ${LABEL}))
	[[ ${?} -ne 0 ]] && abort 11 "Qubes Admin API query failed!"
	for LABEL in "${LABELS[@]}"; do
		local V
		INDEX=$(qubesd_admin_api admin.label.Index dom0 ${LABEL})
		[[ ${?} -ne 0 ]] && abort 11 "Qubes Admin API query failed!"
		V=$(qubesd_admin_api admin.label.Get dom0 ${LABEL})
		[[ ${?} -ne 0 ]] && abort 11 "Qubes Admin API query failed!"
		$ANSI && V=$(ANSI "${V}" "${V}")
		printf "${PRINTFORMAT}\n" "${LABEL}" "${INDEX}" "${V}" 
	done
}

# Synopsis verify_target_icons
verify_target_icons() {
	$VERBOSE && echo "Checking for ${TARGETICONS} directory & icon theme..."
	# No confirming as creating ~/.local/share/icons is a benign operation.
	if ! [ -f "${TARGETICONS}/index.theme" ]; then
		! [ -d "${TARGETICONS}" ] && mkdir -p "${TARGETICONS}"
		cp "${SOURCETEMPLATE}/index.theme" "${TARGETICONS}/index.theme"
		for directory in $(find ${SOURCETEMPLATE} -type d); do
			mkdir -p "${directory/${SOURCETEMPLATE}/${TARGETICONS}}"
		done
		gtk-update-icon-cache "${TARGETICONS}" || \
			abort 11 "Did not manage to create ICON dir"
		$VERBOSE && echo "Successfully created ${TARGETICONS}"
	fi
}

# Synopsis copy_and_tint_svgs
copy_and_tint_svgs() {
	local klass src dst color_orig color_tint
	local -a palette
	for klass in "${!SVGTEMPLATE[@]}"; do
		src="${SVGTEMPLATE[${klass}]}"
		dst="$TARGETICONS/scalable/apps/${klass}-${LABEL}.svg"
		$VERBOSE && echo "${src} -> ${dst}"
		cp ${src} ${dst} || abort 22 "Did not manage to copy ICON"
		if ${SVGTEMPLATETINT["${klass}"]}; then
			$VERBOSE && echo Tinting $dst
			palette=($(sed -nr 's/^.*(#[0-9a-fA-F]{6}).*$/\1/p' \
				${dst} | sort | uniq))
			for color_orig in "${palette[@]}"; do
				color_tint=$(tint_color ${color_orig} ${VALUE})
				color_tint=${color_tint/0x/#}
				$VERBOSE && echo "$color_orig -> $color_tint"
				sed -r "s/${color_orig}/${color_tint}/g" $dst -i
				[[ ${?} -ne 0 ]] && \
					abort 11 "Did not manage to tint ICONs"
			done
		fi
	done
}

# Synopsis generate_pngs
generate_pngs() {
	local klass src dst dim
	for klass in "${!SVGTEMPLATE[@]}"; do
		src="$TARGETICONS/scalable/apps/${klass}-${LABEL}.svg"
		for png in $(find $SOURCETEMPLATE -name ${klass}-red.png); do
			dst="${png/red/${LABEL}}"
			dst="${png/$SOURCETEMPLATE/$TARGETICONS}"
			dim="${dst##*hicolor/}"
			dim="${dim%%/devices*}"; dim="${dim%%/apps*}"
			${CONVERTCMD} ${src} -resize ${dim} ${dst} ||\
				abort 11 "Did not manage to generate PNGs"
		done
	done
}

# Synopsis label_create LABEL VALUE
label_create() {
	local LABEL="${1}" VALUE="${2}"
	local V="${VALUE}"
	local api_message
	[ -z "${CONVERTCMD}" ] && abort 11 \
		"Either GraphicMagick or ImageMagick is neede to generate ICONs"
	$ANSI && V=$(ANSI "${V}" "${V}")
	$VERBOSE && echo "Creating ${LABEL} label with the value of ${V} ..."
	! $ASSUMEYES && prompt "You are about to add a new label to Qubes OS!"
	verify_target_icons
	copy_and_tint_svgs
	generate_pngs
	gtk-update-icon-cache "${TARGETICONS}" || \
		abort 22 "Did not manage to generate ICONs"
	IFS=$'\n' api_message=($(qubesd_admin_api admin.label.Create dom0 \
		"${LABEL}" "${VALUE}"))
	if [[ ${?} = 0 ]]; then
		echo "Successfully created" "${LABEL} label = ${V}"
	else
		echo "Operation failed! Here is the result of Admin API call:"
		printf '%s\n' "${api_message[@]}"
		exit 11
	fi
}

# Synopsis label_get LABEL|INDEX
label_get() {
	local LABEL="${1}" api_message V
	$VERBOSE && echo "Getting value for label: ${LABEL}" 
	IFS=$'\n' api_message=($(qubesd_admin_api admin.label.Get dom0 \
		${LABEL}))
	if [[ ${?} = 0 ]]; then
		V="${api_message[0]}"
		$ANSI && V=$(ANSI "${V}" "${V}")
		if $RAWDATA; then
			echo ${V}
		else
			echo "Value of label ${LABEL} = ${V}"
		fi
	else
		echo "Operation failed! Here is the result of Admin API call:"
		printf '%s\n' "${api_message[@]}"
		exit 11
	fi
}

# Synopsis label_index LABEL
label_index() {
	local LABEL="${1}" api_message INDEX
	$VERBOSE && echo "Getting index for label: ${LABEL}" 
	IFS=$'\n' api_message=($(qubesd_admin_api admin.label.Index dom0 \
		${LABEL}))
	if [[ ${?} = 0 ]]; then
		INDEX="${api_message[0]}"
		if $RAWDATA; then
			echo ${INDEX}
		else
			echo "Index of label ${LABEL} = ${INDEX}"
		fi
	else
		echo "Operation failed! Here is the result of Admin API call:"
		printf '%s\n' "${api_message[@]}"
		exit 11
	fi
}

# Synopsis label_remove LABEL|INDEX
label_remove() {
	local LABEL="${1}" INDEX api_message
	$VERBOSE && echo "Removing label: ${LABEL}" 
	api_message=($(qubesd_admin_api admin.label.Index dom0 "${LABEL}"))
	if [[ ${?} -ne 0 ]]; then
		echo "Operation failed! Here is the result of Admin API call:"
		printf '%s\n' "${api_message[@]}"
		exit 11
	fi
	INDEX="${api_message[0]}"
	if ! $ASSUMEYES; then
		[ "${INDEX}" -lt 9 ] && echo "Warning! ${LABEL} is a Qubes OS "\
			"default label!"
		echo "You are about to remove ${LABEL} label."
		read -p "Do you want to proceed? (y/n) " REPLY
		if [[ $REPLY =~ ^[Nn]$ ]]; then
			echo "Aborting operation..."
			exit 0
		elif ! [[ $REPLY =~ ^[Yy]$ ]]; then
			abort 22 "Please type Y or N!"
		fi
	fi
	IFS=$'\n' api_message=($(qubesd_admin_api admin.label.Remove dom0 \
		"${LABEL}"))
	if [[ ${?} -ne 0 ]]; then
		echo "Operation failed! Here is the result of Admin API call:"
		printf '%s\n' "${api_message[@]}"
		exit 11
	else
		echo "Successfully removed ${LABEL} label" 
		$VERBOSE && echo "SVGs and PNGs are not deleted automatically"
	fi
}

# Synopsis: main ALL_ARGS
main() {
	parse_cmd_parameters "${@}"
	case ${SUBCOMMAND} in
		list) label_list;;
		create) label_create "${LABEL}" "${VALUE}";;
		get) label_get "${LABEL}";;
		index) label_index "${LABEL}";;
		remove) label_remove "${LABEL}";;
	esac
}

main "${@}"
exit 0
